spring.application.name=mscursosprofe
server.port=8085
mscursos=${IP_CURSOS:localhost}
#server.port=${PUERTO:0}
#instancia=${NOMBRE:nombre0}
#server.port=${random.int[8090,8092]}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://${DB_HOST:localhost}:3306/bdkyndryl?serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true
info.app.name=Microservicio Cursos Kyndryl
info.app.description=App para la gestion de cursos
info.app.version=1.0.1
eureka.client.service-url.defaultZone=http://${EUREKA_HOST:localhost}:8761/eureka
eureka.instance.instance-id=${spring.application.name}:${random.value}
eureka.instance.prefer-ip-address=true
eureka.instance.hostname=${EUREKA_HOST:localhost}

management.endpoints.enabled-by-default=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.info.env.enabled=true
management.endpoint.shutdown.enabled=true


#ponemos que se necesitan minimo 5 llamadas para evaluar el estado del circuito
#si se supera el 50 por ciento de llamdas malas, se cambia de cerrado a abierto
#cada 10 peticiones, se resetea el contador 
#tambien podria usarse el tiempo para limitar las llamadas almacenadas 
#en 5 segundos pasa de abierto a semi abierto 
resilience4j.circuitbreaker.instances.CircuitBreakerDemoService.register-health-indicator=true
resilience4j.circuitbreaker.instances.CircuitBreakerDemoService.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.CircuitBreakerDemoService.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.CircuitBreakerDemoService.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.CircuitBreakerDemoService.wait-duration-in-open-state=5s
resilience4j.circuitbreaker.instances.CircuitBreakerDemoService.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.CircuitBreakerDemoService.sliding-window-size=10
resilience4j.circuitbreaker.instances.CircuitBreakerDemoService.sliding-window-type=count-based

#el sistema lo intenta 3 veces hasta delegar en el metodo de fallo
#la espera mayor de 1 segundo hace que la llamada se de por fallida 
resilience4j.retry.instances.retryApiDemo.max-attempts=3
resilience4j.retry.instances.retryApiDemo.wait-duration=1s
resilience4j.retry.metrics.legacy.enabled=true
resilience4j.retry.metrics.enabled=true


#limitamos a 3 peticiones por 60 segundos
#si se recibien mas peticiones en ese tiempo, pasa a fallo
#el timepo de espera entre periodos es cero
resilience4j.ratelimiter.instances.mitasalimite.limitForPeriod=3
resilience4j.ratelimiter.instances.mitasalimite.limitRefreshPeriod=60s
resilience4j.ratelimiter.instances.mitasalimite.timeoutDuration=0s

#si la llamada dura mas de 2 segundos dara fallo
resilience4j.timelimiter.instances.chiquito.timeoutDuration=2s
